name: Deploy Application to production
on:
  push:
    branches:
      - main
jobs:
  create-deployment-artifacts:
    name: Create Deployment
    runs-on: ubuntu-latest
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix  }}
    steps:
      - uses: actions/checkout@v2

      - name: Configure PHP 8.1
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.1
          extensions: mbstring,ctype,fileinfo,openssl,PDO,bcmath,json,tokenizer,xml
      - name: Install Composer dependencies
        working-directory: api
        run: composer install --no-dev --no-interaction --prefer-dist
      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf api.${{ github.sha }}.tar.gz --exclude=*.git --exclude=node_modules *
      - name: Store artifact for dist
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: api.${{ github.sha }}.tar.gz
      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"


  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: app-build
        - name: Upload
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.HOST }}
            port: ${{ secrets.PORT }}
            key: ${{ secrets.SSH_KEY }}
            source: api.${{ github.sha }}.tar.gz
            target: ${{ matrix.server.path }}/artifacts
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${ GITHUB_SHA }"
            tar xzf {{ matrix.server.path }}/artifacts/api.${ GITHUB_SHA }.tar.gz -C "${{ matrix.server.path }}/releases/${ GITHUB_SHA }"


#  build:
#
#    runs-on: ubuntu-latest
#
#    strategy:
#      matrix:
#        node-version: [ 14.x ]
#        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Use Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node-version }}
#          cache: 'npm'
#        working-directory: client
#        run: npm run build
