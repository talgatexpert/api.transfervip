name: Nuxt production
on:
  push:
    branches:
      - main
jobs:
  create-deployment-artifacts:
    name: Create Deployment
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [ 14.x ]
    outputs:
      deployment-matrix: ${{ steps.export-deployment-matrix.outputs.deployment-matrix  }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Prepare build
        run: |
          cp client/nuxt.config.js.production nuxt.config.js
          cp client/ecosystem.config.js.production ecosystem.config.js
#          echo "${{ secrets.NUXT_ECOSYSTEM }}" > "client/ecosystem.config.js.production"
      - name: Run npm scripts
        working-directory: client
        run: npm install && npm run build
      - name: Prepare zip
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf client.${{ github.sha }}.tar.gz --exclude=*.git  client
      - name: Store artifact for dist
        uses: actions/upload-artifact@v2
        with:
          name: app-build
          path: client.${{ github.sha }}.tar.gz
      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          JSON="$(cat ./deployment.nuxt.json)"
          JSON="${JSON//'%'/'%25'}"
          JSON="${JSON//$'\n'/'%0A'}"
          JSON="${JSON//$'\r'/'%0D'}"
          echo "::set-output name=deployment-matrix::$JSON"


  prepare-release-on-server:
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Create SSH key
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
      - uses: actions/download-artifact@v2
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          source: client.${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts
      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_SHA, BASE_PATH, ACTIVE_RELEASE_PATH,RELEASE_PATH
          script: |
            mkdir -p "${{ matrix.server.path }}/releases"
            mkdir -p "${{ matrix.server.path }}/releases/${{ github.sha }}"
            tar xzf ${{ matrix.server.path }}/artifacts/client.${{ github.sha }}.tar.gz -C "${{ matrix.server.path }}/releases/${{ github.sha }}"
  run-before-hook:
    name: "${{ matrix.server.name }}: Before hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hook
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.beforeHooks }}


  activate-release:
    name: "${{ matrix.server.name }}: Activate release"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server, run-before-hook ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Active release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          BASE_PATH: ${{ matrix.server.path }}
          LARAVEL_ENV: ${{ secrets.LARAVEL_ENV }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH,LARAVEL_ENV
          script: |

            cp $RELEASE_PATH/client/nuxt.config.js.production $RELEASE_PATH/client/nuxt.config.js
            cp $RELEASE_PATH/client/ecosystem.config.js.production $RELEASE_PATH/client/ecosystem.config.js
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
#            cd $ACTIVE_RELEASE_PATH
#            pm2 start
#            pm2 save


  run-after-hook:
    name: "${{ matrix.server.name }}: After hook"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server,activate-release ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hook
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          BASE_PATH: ${{ matrix.server.path }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH
          script: |
            ${{ matrix.server.afterHooks }}


  clean-up:
    name: "${{ matrix.server.name }}: Run clean up"
    runs-on: ubuntu-latest
    needs: [ create-deployment-artifacts, prepare-release-on-server,activate-release, run-after-hook ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.deployment-matrix) }}
    steps:
      - name: Run before hook
        uses: appleboy/ssh-action@master
        env:
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts/
          RELEASES_PATH: ${{ matrix.server.path }}/releases/
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_KEY }}
          envs: ARTIFACTS_PATH,RELEASES_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +6 | xargs rm -rf

